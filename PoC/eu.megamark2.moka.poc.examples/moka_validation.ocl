import uml : 'http://www.eclipse.org/uml2/5.0.0/UML'

package uml

context Element

/**
 * Declare a helper operation to map ok/warning verdict to ok/error
 */
 
def: asError (verdict : Boolean) : Boolean = if verdict then true else null endif

context NamedElement

/**
 * Get name
 */ 
 def: theName : String = if name.oclIsUndefined() then 'unnamed' else name endif

/**
 * ValueSpecificationAction validation
 */
context ValueSpecificationAction
--
-- ValueSpecificationAction should have a name
--
inv vsaShouldHaveName('[Moka-MegaMart] The \'name\' property of "' + self.toString() + '" is not set'):
	not self.name.oclIsUndefined() and self.name.size() > 0
	
inv vsaShouldHaveValue ('[Moka-MegaMart] The \'value\' property of "' + self.toString() + '" is not set'):
	asError (not self.value.oclIsUndefined())
	
inv vsaShouldHaveResult ('[Moka-MegaMart] The \'result\' property of "' + self.toString() + '" is not set'): 
	asError (not self.result.oclIsUndefined()) --check

/**
 * InputPin validation
 */
context InputPin

inv inputPinShouldHaveType ('[Moka-MegaMart] The \'type\' property of "' + self.theName + '" is not set'):
	asError (not self.type.oclIsUndefined())
	
/**
 * OutputPin validation
 */
context OutputPin

inv outputPinShouldHaveType ('[Moka-MegaMart] The \'type\' property of "' + self.theName + '" is not set'):
	asError (not self.type.oclIsUndefined())
	
/**
 * There are not orphan output pins
 */
 
 inv noOrphansOutputPins ('[Moka-MegaMart] OutputPin "' + self.theName + '" is not connected by an object flow'): 
 asError (ObjectFlow.allInstances()->exists(source = self or target = self))
	
/**
 * ObjectFlow validation
 */
context ObjectFlow

/**
 * Pins connected by objectFlow have compatible types
 */
inv pinTypesCompatibleInObjectFlow ('[Moka-MegaMart] Output/Input Pin types not compatible'):
	let source:ActivityNode = self.source, target:ActivityNode = self.target in 
		if source.oclIsTypeOf(OutputPin) and target.oclIsTypeOf(InputPin)
		then
			asError(source.oclAsType(OutputPin).type = target.oclAsType(InputPin).type)
		else
			true
		endif	
		
context CallBehaviorAction

/**
 * Check type compatibility between arguments of the CallBehaviorAction and the parameters of the associated Activity (in behavior property)
 * CallBehaviorAction has a behavior:Activity property. 
 * CallBehaviorAction has a arguments:Collection<InputPin> property
 * Activity has a paramertes:Collection<InputPin> property
 * Elements in arguments and parameters must match for name and type.
 */
 
 inv argumentsMatchParameters ('[Moka-MegaMart] XXX '): 
 	let parameters : OrderedSet (Parameter) = self.behavior.ownedParameter in  
 		self.argument->forAll(arg:InputPin|parameters->exists (par:Parameter|arg.name = par.name and arg.type = par.type))

endpackage